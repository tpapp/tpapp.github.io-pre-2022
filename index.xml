<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tamás K. Papp&#39;s website</title>
  <link href="https://tpapp.github.io/index.xml" rel="self"/>
  <link href="https://tpapp.github.io/"/>
  <updated>2017-06-11T14:48:06+02:00</updated>
  
  <id>https://tpapp.github.io/</id>
  <author>
    <name>Tamás K. Papp</name>
  </author>
  <generator>Hugo -- gohugo.io</generator>
  
  <entry>
    <title type="html">Branch prediction: yet another example</title>
    <link href="https://tpapp.github.io/post/branch_prediction2/"/>
    <id>https://tpapp.github.io/post/branch_prediction2/</id>
    <published>2017-10-04T10:12:02+02:00</published>
    <updated>2017-10-04T10:12:02+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/branch_prediction2/">&lt;p&gt;Tomas Lycken linked a &lt;a href=&#34;https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array/11227902#11227902&#34;&gt;very nice discussion on StackOverflow&lt;/a&gt; about branch prediction as a comment on the &lt;a href=&#34;https://tpapp.github.io/post/branch_prediction/&#34;&gt;previous post&lt;/a&gt;. It has an intuitive explanation (read it if you like good metaphors) and some Java benchmarks. I was curious about how it looks in Julia.&lt;/p&gt;

&lt;p&gt;The exercise is to sum elements in a vector &lt;em&gt;only if&lt;/em&gt; they are greater than or equal to 128.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; sumabove_if(x)
    s &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; zero(eltype(x))
    &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; elt &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x
        &lt;span class=&#34;s3e8&#34;&gt;if&lt;/span&gt; elt &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;128&lt;/span&gt;
            s &lt;span class=&#34;sfa0&#34;&gt;+=&lt;/span&gt; elt
        &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
    s
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This calculation naturally has a branch in it, while the branchless
version, using &lt;code&gt;ifelse&lt;/code&gt;, does not:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; sumabove_ifelse(x)
    s &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; zero(eltype(x))
    &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; elt &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x
        s &lt;span class=&#34;sfa0&#34;&gt;+=&lt;/span&gt; ifelse(elt &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;128&lt;/span&gt;, elt, zero(eltype(x)))
    &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
    s
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The actual example has something different: using tricky bit-twiddling
to calculate the same value. I generally like to leave this sort of
thing up to the compiler, because it is much, much better at it than I
am, and I make mistakes all the time; worse, I don&#39;t know what I
actually did when I reread the code 6 months later. But I included it
here for comparison:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; sumabove_tricky(x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;Vector&lt;/span&gt;{&lt;span class=&#34;s3ee&#34;&gt;Int64&lt;/span&gt;})
    s &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3ee&#34;&gt;Int64&lt;/span&gt;(&lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;)
    &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; elt &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x
        s &lt;span class=&#34;sfa0&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;~&lt;/span&gt;((elt &lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;63&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;&amp;amp;&lt;/span&gt; elt
    &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
    s
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Following the original example on StackOverflow, we sum &lt;code&gt;2^15&lt;/code&gt; random integers in &lt;code&gt;1:256&lt;/code&gt;. For this, we don&#39;t need to worry about overflow. We also sum the &lt;em&gt;sorted&lt;/em&gt; vector: this will facilitate branch predicion, since the various branches will be contiguous.&lt;/p&gt;

&lt;p&gt;I also benchmark a simple version using generators:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;sumabove_generator(x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; sum(y &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x &lt;span class=&#34;s3e8&#34;&gt;if&lt;/span&gt; y &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;128&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;caption&gt;
Benchmarks (&lt;span  class=&#34;math&#34;&gt;\(μ\)&lt;/span&gt;s)

&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;random&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sorted&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ifelse&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;if&lt;/code&gt; &amp;amp; &lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;n/a&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;tricky&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;generator&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Benchmarks are in the table above. Note that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;for the version with &lt;code&gt;if&lt;/code&gt;, working on sorted vectors is dramatically faster (about 5x).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the non-branching &lt;code&gt;ifelse&lt;/code&gt; version beats them hands down, and naturally it does not care about sorting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if you have to use &lt;code&gt;if&lt;/code&gt;, then you are better off sorting, &lt;em&gt;even if you take the time of that into account&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;generators are susprisingly bad.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the tricky bit-twiddling version is actually worse than &lt;code&gt;ifelse&lt;/code&gt; (which reinforces my aversion to it).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Self-contained code for everything is available below.&lt;/p&gt;



&lt;div class=&#34;codedownload&#34;&gt;&lt;p&gt;download code as &lt;a href=&#34;https://tpapp.github.io/post/branch_prediction2/code.jl&#34;&gt;code.jl&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title type="html">CPU pipelines: when more is less</title>
    <link href="https://tpapp.github.io/post/branch_prediction/"/>
    <id>https://tpapp.github.io/post/branch_prediction/</id>
    <published>2017-10-03T11:40:58+02:00</published>
    <updated>2017-10-03T11:40:58+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/branch_prediction/">&lt;p&gt;I have been working on micro-optimizations for some simulation
code, and was reminded of a counter-intuitive artifact of modern CPU
architecture, which is worth a short post.&lt;/p&gt;

&lt;p&gt;Consider (just for the sake of example) a very simple (if not
particularly meaningful) function,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
f(x) = \begin{cases}
(x+2)^2 &amp; \text{if } x \ge 0,\\
1-x &amp; \text{otherwise}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;with implementations&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;f1(x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; ifelse(x &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;, abs2(x&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;), &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;x)
f2(x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;?&lt;/span&gt; abs2(x&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;f1&lt;/code&gt; calculates &lt;em&gt;both&lt;/em&gt; possibilities before choosing between them with
&lt;code&gt;ifelse&lt;/code&gt;, while &lt;code&gt;f2&lt;/code&gt; will only calculate values on demand. So, intuitively, it should be faster.&lt;/p&gt;

&lt;p&gt;But it isn&#39;t...&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; randn(&lt;span class=&#34;sc84&#34;&gt;1_000_000&lt;/span&gt;);

julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; BenchmarkTools

julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s7d6&#34;&gt;@btime&lt;/span&gt; f1&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(&lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;x);
  &lt;span class=&#34;sc82&#34;&gt;664.228&lt;/span&gt; μs (&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt; allocations&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc82&#34;&gt;7.63&lt;/span&gt; MiB)

julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s7d6&#34;&gt;@btime&lt;/span&gt; f2&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(&lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;x);
  &lt;span class=&#34;sc82&#34;&gt;6.519&lt;/span&gt; ms (&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt; allocations&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc82&#34;&gt;7.63&lt;/span&gt; MiB)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;...it is about 10x &lt;em&gt;slower&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This can be understood as an artifact of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Instruction_pipelining&#34;&gt;instruction
pipeline&lt;/a&gt;: your
x86 CPU likes to perform similar operations in staggered manner, and
it does not like branches (jumps) because they break the flow.&lt;/p&gt;

&lt;p&gt;Comparing the native code reveals that while &lt;code&gt;f1&lt;/code&gt; is jump-free, the &lt;code&gt;if&lt;/code&gt; in &lt;code&gt;f2&lt;/code&gt; results in a jump (&lt;code&gt;jae&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s7d6&#34;&gt;@code_native&lt;/span&gt; f1(&lt;span class=&#34;sc82&#34;&gt;1.0&lt;/span&gt;)
        &lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;text
Filename&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; REPL[&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;]
        pushq   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        movq    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rsp, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        movabsq &lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;139862498743472&lt;/span&gt;, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax  &lt;span class=&#34;s1770&#34;&gt;# imm = 0x7F34468E14B0&lt;/span&gt;
        movsd   (&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax), &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm2           &lt;span class=&#34;s1770&#34;&gt;# xmm2 = mem[0],zero&lt;/span&gt;
Source line&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;
        addsd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm2
        mulsd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm2, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm2
        movabsq &lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;139862498743480&lt;/span&gt;, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax  &lt;span class=&#34;s1770&#34;&gt;# imm = 0x7F34468E14B8&lt;/span&gt;
        movsd   (&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax), &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm3           &lt;span class=&#34;s1770&#34;&gt;# xmm3 = mem[0],zero&lt;/span&gt;
        subsd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm3
        xorps   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        cmpnlesd        &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        andpd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm3
        andnpd  &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm2, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        orpd    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm3, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        movapd  &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0
        popq    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        retq
        nopw    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;cs&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;(&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax,&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax)

julia&lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s7d6&#34;&gt;@code_native&lt;/span&gt; f2(&lt;span class=&#34;sc82&#34;&gt;1.0&lt;/span&gt;)
        &lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;text
Filename&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; REPL[&lt;span class=&#34;sc84&#34;&gt;3&lt;/span&gt;]
        pushq   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        movq    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rsp, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
Source line&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;
        xorps   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        ucomisd &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0
        jae     L37
        movabsq &lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;139862498680736&lt;/span&gt;, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax  &lt;span class=&#34;s1770&#34;&gt;# imm = 0x7F34468D1FA0&lt;/span&gt;
        movsd   (&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax), &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1           &lt;span class=&#34;s1770&#34;&gt;# xmm1 = mem[0],zero&lt;/span&gt;
        subsd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1
        movapd  &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm1, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0
        popq    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        retq
L37&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;
        movabsq &lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;139862498680728&lt;/span&gt;, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax  &lt;span class=&#34;s1770&#34;&gt;# imm = 0x7F34468D1F98&lt;/span&gt;
        addsd   (&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax), &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0
        mulsd   &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0, &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;xmm0
        popq    &lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rbp
        retq
        nopl    (&lt;span class=&#34;sfa0&#34;&gt;%&lt;/span&gt;rax)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In my application the speed gain was more modest, but still
sizeable. Benchmarking a non-branching version of your code is
sometimes worth it, especially if it the change is simple &lt;em&gt;and&lt;/em&gt; both
branches of the conditional can be run error-free. If, for example, we
had to calculate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;g(x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;sfa0&#34;&gt;≥&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;√&lt;/span&gt;(x&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;then we could not use &lt;code&gt;ifelse&lt;/code&gt; without restricting the domain, since
&lt;code&gt;√(x+2)&lt;/code&gt; would fail whenever &lt;code&gt;x &amp;lt; -2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Julia &lt;code&gt;Base&lt;/code&gt; contains many optimizations like this: for a particularly
nice example see functions that use &lt;code&gt;Base.null_safe_op&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Blog redesign 2.0</title>
    <link href="https://tpapp.github.io/post/blog-redesign-201709/"/>
    <id>https://tpapp.github.io/post/blog-redesign-201709/</id>
    <published>2017-09-29T19:55:44+02:00</published>
    <updated>2017-09-29T19:55:44+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/blog-redesign-201709/">&lt;p&gt;I have redesigned my blog (again), mainly tweaking the CSS and
hopefully achieving better support on small screens (which are still
not ideal for math, but now you should get a red warning float at the
bottom).&lt;/p&gt;

&lt;p&gt;I also re-did the feed code so that it would render better on
&lt;a href=&#34;https://www.juliabloggers.com/&#34;&gt;juliabloggers.com&lt;/a&gt;. Now the whole
content of each post should be scraped seamlessly, and appear
correctly. However, the only way to test the whole toolchain is to do
it live, and I apologize if something is still not perfect and you get
bogus updates (BTW, this post should not show up in the Julia feed).&lt;/p&gt;

&lt;p&gt;Highlights of the changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;responsive design,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nicer fonts,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;line breaks in MathJax when necessary and supported,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;better highlighting (Julia now looks especially nice),&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;embedded code blocks with a download link,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;better image placement,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Emacs screenshots now use a branch of &lt;a href=&#34;https://github.com/tpapp/emacs-htmlize/tree/pre-colors&#34;&gt;emacs-htmlize&lt;/a&gt;, which hopefully gets merged soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As always, the source code for the whole site is &lt;a href=&#34;https://github.com/tpapp/tpapp.github.io-source&#34;&gt;available&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Automatic differentiation of discontinuous integrals</title>
    <link href="https://tpapp.github.io/post/discontinuous_integral_ad/"/>
    <id>https://tpapp.github.io/post/discontinuous_integral_ad/</id>
    <published>2017-09-15T16:03:10+02:00</published>
    <updated>2017-09-15T16:03:10+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/discontinuous_integral_ad/">&lt;p&gt;This is a &lt;em&gt;much simplified&lt;/em&gt; writeup of a problem I encountered, in a self-contained blog post.&lt;/p&gt;

&lt;p&gt;You want to approximate the integral&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
I(\theta) = \int 1(g(x) &gt; 0) f(x,\theta) dx
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(g\)&lt;/span&gt; is a continuous function, and &lt;span  class=&#34;math&#34;&gt;\(f(x,\theta)\)&lt;/span&gt; is a parametric distribution over &lt;span  class=&#34;math&#34;&gt;\(x\)&lt;/span&gt;. Everthing is continous, and thus &lt;span  class=&#34;math&#34;&gt;\(I\)&lt;/span&gt; is, too.&lt;/p&gt;

&lt;p&gt;You face the following constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(g\)&lt;/span&gt; is a black box. We will pretend that you can&#39;t invert it (except for checking our results, of course).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can calculate the probability density function &lt;span  class=&#34;math&#34;&gt;\(f\)&lt;/span&gt; and even draw &lt;span  class=&#34;math&#34;&gt;\(x\)&lt;/span&gt;&#39;s for a particular &lt;span  class=&#34;math&#34;&gt;\(\theta\)&lt;/span&gt;, but that&#39;s pretty much it. You don&#39;t even get a cdf! (Again, except for checking our results.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using Monte Carlo methods, you can do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;draw &lt;span  class=&#34;math&#34;&gt;\(x_i \sim F(\cdot, \theta)\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(i=1,\dots,N\)&lt;/span&gt;,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;approximate&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
I(\theta) \approx \frac{1}{N}\sum_i 1(g(x_i) &gt; 0)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You could code this in Julia as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;d &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; distr(θ)   &lt;span class=&#34;s1770&#34;&gt;# suppose this returns some distribution that supports Base.rand&lt;/span&gt;
x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; rand(d, N)
mean(g&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(x) &lt;span class=&#34;sfa0&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So far, neat and simple. Now, the fly in the ointment: &lt;strong&gt;you need the derivative&lt;/strong&gt; &lt;span  class=&#34;math&#34;&gt;\(I&#39;(\theta)\)&lt;/span&gt; for optimization or Hamiltonian Monte Carlo. The problem is that you cannot &lt;code&gt;ForwardDiff&lt;/code&gt; your way through the code above: AD&#39;ing a discontinuous step function will just give you &lt;span  class=&#34;math&#34;&gt;\(0\)&lt;/span&gt;, and &lt;code&gt;rand&lt;/code&gt; does not work with &lt;code&gt;ForwardDiff.Dual&lt;/code&gt;s anyway (which is very sensible).&lt;/p&gt;

&lt;p&gt;However, there &lt;em&gt;is&lt;/em&gt; a solution: rewrite the approximation as&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
I(\theta; \theta_0) \approx \frac{1}{N}\sum_i 1(g(x_i) &gt; 0) \frac{f(x_i,\theta)}{f(x_i,\theta_0)}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(\theta_0\)&lt;/span&gt; is the parameter used to simulate the &lt;span  class=&#34;math&#34;&gt;\(x_i\)&lt;/span&gt;. Differentiate the above at &lt;span  class=&#34;math&#34;&gt;\(\theta = \theta_0\)&lt;/span&gt;. This approximates&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
I&#39;(\theta) = \int 1(g(x) &gt; 0) \frac{\partial f(x,\theta)/\partial \theta}{f(x,\theta)}f(x,\theta) dx = \int 1(g(x) &gt; 0) \partial f(x,\theta)/\partial \theta dx
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;which is exactly what you want.&lt;/p&gt;

&lt;p&gt;Assume that the actual calculation is very complicated, so we would rather avoid implementing it for the integral and the derivative separately. It turns out that this is very simple to do with &lt;code&gt;ForwardDiff.Dual&lt;/code&gt; values: the code is literally a one-liner and a fallback method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;elasticity(x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;Real&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; one(x)
elasticity(x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;Dual{T,V,N}) where {T,V,N} &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Dual{T}(one(V), partials(x) &lt;span class=&#34;sfa0&#34;&gt;/&lt;/span&gt; value(x))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;which you can use in a function like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;integral_approx(g, d, x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; mean((g&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(x) &lt;span class=&#34;sfa0&#34;&gt;.&amp;gt;&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;.*&lt;/span&gt; elasticity&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(pdf&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(d, x)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I demonstrate this with &lt;span  class=&#34;math&#34;&gt;\(g(x) = x\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(x \sim \text{Normal}(\theta, 1)\)&lt;/span&gt;, for which of course we know that the analytical values for &lt;span  class=&#34;math&#34;&gt;\(I\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(I&#39;\)&lt;/span&gt; are the right tail probability and the pdf at 0, respectively.&lt;/p&gt;

&lt;p&gt;Graphs below show that the approximation is reasonable — we could make it much better with &lt;a href=&#34;https://github.com/stevengj/Sobol.jl&#34;&gt;low-discrepancy sequences&lt;/a&gt;, but that is an orthogonal issue.&lt;/p&gt;



&lt;img src=&#34;https://tpapp.github.io/post/discontinuous_integral_ad/integral.svg&#34; alt=&#34;integral&#34;&gt;




&lt;img src=&#34;https://tpapp.github.io/post/discontinuous_integral_ad/derivative.svg&#34; alt=&#34;derivative&#34;&gt;


&lt;p&gt;It is amazing how much you can accomplish with two lines of code in Julia! The problem that motivated this blog post is multivariate with irregular regions over which &lt;span  class=&#34;math&#34;&gt;\(\{ x: g(x) &gt; 0 \}\)&lt;/span&gt;, but I used &lt;code&gt;elasticity&lt;/code&gt; as above.&lt;/p&gt;

&lt;p&gt;Self-contained code for everything is available below.&lt;/p&gt;




&lt;div class=&#34;codeheader&#34;&gt;&lt;p&gt;download as &lt;a href=&#34;https://tpapp.github.io/post/discontinuous_integral_ad/code.jl&#34;&gt;code.jl&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; ForwardDiff
&lt;span class=&#34;s3e8&#34;&gt;import&lt;/span&gt; ForwardDiff&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; Dual, value, partials, Tag
&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; Distributions
&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; Plots
&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; LaTeXStrings
gr()

&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;# elasticity calculation&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;

&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    elasticity(x)
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;Calculate `x/x`, stripping `x` of partial derivative information. Useful for
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;calculating elasticities of the form `∂f/f` using ForwardDiff.
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
elasticity(x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;Real&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; one(x)

elasticity(x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;Dual{T,V,N}) where {T,V,N} &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Dual{T}(one(V), partials(x) &lt;span class=&#34;sfa0&#34;&gt;/&lt;/span&gt; value(x))

&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;# example application&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;

integral_approx(g, d, x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; mean((g&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(x) &lt;span class=&#34;sfa0&#34;&gt;.&amp;gt;&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;sfa0&#34;&gt;.*&lt;/span&gt; elasticity&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(pdf&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(d, x)))

&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Helper function that returns the value and derivative at the same time.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; value_and_derivative(f&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;F, x&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;R) where {F,R&lt;span class=&#34;sfa0&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;Real&lt;/span&gt;}
    T &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; typeof(Tag(F, R))
    y &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; f(Dual{T}(x, one(x)))
    value(y), partials(y, &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;)
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;

distr(θ) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Normal(θ, &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;)

g(x) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; x

&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; ID_analytical(θ)
    d &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; distr(θ)
    ccdf(d, &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;), pdf(d, &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;)
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; ID_approx(θ)
    x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; rand(distr(θ), &lt;span class=&#34;sc84&#34;&gt;1000&lt;/span&gt;)
    value_and_derivative(θ&lt;span class=&#34;sfa0&#34;&gt;-&amp;gt;&lt;/span&gt;integral_approx(g, distr(θ), x), θ)
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;

θs &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; linspace(&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;sc84&#34;&gt;51&lt;/span&gt;)
ID0s &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; ID_analytical&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(θs)
ID1s &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; ID_approx&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(θs)

scatter(θs, first&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(ID0s), xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sc25&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;theta&amp;#34;&lt;/span&gt;, ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;integral&amp;#34;&lt;/span&gt;,
        label &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;analytical&amp;#34;&lt;/span&gt;, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;topleft)
scatter!(θs, first&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(ID1s), label &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;approximation&amp;#34;&lt;/span&gt;)
savefig(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;integral.svg&amp;#34;&lt;/span&gt;)

scatter(θs, last&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(ID0s), xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sc25&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;theta&amp;#34;&lt;/span&gt;, ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;derivative&amp;#34;&lt;/span&gt;,
        label &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;analytical&amp;#34;&lt;/span&gt;, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;topleft)
scatter!(θs, last&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(ID1s), label &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;approximation&amp;#34;&lt;/span&gt;)
savefig(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;derivative.svg&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title type="html">log1p in Julia</title>
    <link href="https://tpapp.github.io/post/log1p/"/>
    <id>https://tpapp.github.io/post/log1p/</id>
    <published>2017-09-13T11:18:59+02:00</published>
    <updated>2017-09-13T11:18:59+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/log1p/">&lt;p&gt;&lt;em&gt;edit&lt;/em&gt;: fixed bogus interaction of MathJax and code highlighting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;edit2&lt;/em&gt;: added benchmarks.&lt;/p&gt;

&lt;p&gt;This is a follow-up on a &lt;a href=&#34;https://discourse.julialang.org/t/log1p-in-base-vs-base-math-julialibm/5852&#34;&gt;question&lt;/a&gt; I asked on the Julia forums about calculating&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\text{log1p}(x) = \log(1+x)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This calculation is tricky because if &lt;span  class=&#34;math&#34;&gt;\(x \approx 0\)&lt;/span&gt;,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\log(1+x) \approx x
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;while as &lt;span  class=&#34;math&#34;&gt;\(x \to \infty\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(\log(1+x)\)&lt;/span&gt; approaches &lt;span  class=&#34;math&#34;&gt;\(\log(x)\)&lt;/span&gt;, so simply using &lt;code&gt;log(1+x)&lt;/code&gt; will not be as accurate as it could be. Numerical analysts have developed specialized methods for these calculations that try to get an accurate answer, and all programming languages serious about numerical calculations have an implementation either in the core language or a library.&lt;/p&gt;

&lt;p&gt;Julia&#39;s &lt;code&gt;Base.log1p&lt;/code&gt; currently suggests that &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; would be preferable, but then I was wondering why isn&#39;t that the default? So I decided to perform a trivial numerical experiment, calculating the error for both, and also benchmark the two methods.&lt;/p&gt;

&lt;h2 id=&#34;accuracy&#34;&gt;Accuracy&lt;/h2&gt;

&lt;p&gt;The key question is what to compare the results with. One could compare to an existing &amp;quot;gold standard&amp;quot; implementation, or simply calculate the results using a higher precision representation. Fortunately, Julia has &lt;code&gt;BigFloat&lt;/code&gt;s available right out of the box.&lt;/p&gt;

&lt;p&gt;The graph below shows the base-2 logarithm of the &lt;em&gt;relative&lt;/em&gt; error for &lt;code&gt;Base.log1p&lt;/code&gt; vs &lt;span  class=&#34;math&#34;&gt;\(\log\_2(1+x)\)&lt;/span&gt;; horizontal lines are &lt;code&gt;log2(eps())&lt;/code&gt; and &lt;code&gt;log2(eps())+1&lt;/code&gt;. This suggests that &lt;code&gt;Base.log1p&lt;/code&gt; is &lt;em&gt;very accurate&lt;/em&gt;, but not as good as it could be when &lt;span  class=&#34;math&#34;&gt;\(x \approx 0\)&lt;/span&gt;.&lt;/p&gt;



&lt;img src=&#34;https://tpapp.github.io/post/log1p/Base_log1p_error.svg&#34; alt=&#34;Base.log1p error&#34;&gt;


&lt;p&gt;The next plot shows the relative accuracy of the relative error above, comparing &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; to &lt;code&gt;Base.log1p&lt;/code&gt; (lower values better). In these simulations, &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; is never worse, but sometimes significantly better (resulting in an extra binary digit of accuracy). This matters especially when &lt;span  class=&#34;math&#34;&gt;\(x \approx 0\)&lt;/span&gt;.&lt;/p&gt;



&lt;img src=&#34;https://tpapp.github.io/post/log1p/JuliaLibm_improvement.svg&#34; alt=&#34;relative log2 acccuracy improvement over Base.log1p&#34;&gt;


&lt;p&gt;The next plot confirms this.&lt;/p&gt;



&lt;img src=&#34;https://tpapp.github.io/post/log1p/JuliaLibm_log1p_error.svg&#34; alt=&#34;JuliaLibm log1p error&#34;&gt;


&lt;h2 id=&#34;speed&#34;&gt;Speed&lt;/h2&gt;

&lt;p&gt;I also evaluated relative speed. The graph below shows the relative runtimes, obtained using &lt;code&gt;BenchmarkTools.@belapsed&lt;/code&gt;. Values below &lt;span  class=&#34;math&#34;&gt;\(1\)&lt;/span&gt; mean that &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; is faster: indeed, this seems to be the case except for values very close to &lt;span  class=&#34;math&#34;&gt;\(0\)&lt;/span&gt;, where there is a 10–20% performance penalty. At other values, &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; is 30–40% &lt;em&gt;faster&lt;/em&gt;.&lt;/p&gt;



&lt;img src=&#34;https://tpapp.github.io/post/log1p/relative_time.svg&#34; alt=&#34;relative time&#34;&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For values near &lt;span  class=&#34;math&#34;&gt;\(0\)&lt;/span&gt;, &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; is more accurate, at a slight performance cost.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For values away from &lt;span  class=&#34;math&#34;&gt;\(0\)&lt;/span&gt;, it is at least as accurate as &lt;code&gt;Base.log1p&lt;/code&gt;, and 30—40% faster.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To me, this suggests that &lt;code&gt;Base.Math.JuliaLibm.log1p&lt;/code&gt; should be the default method — mostly because the extra accuracy is more important to me than the slight performance cost.&lt;/p&gt;

&lt;p&gt;Code is available below.&lt;/p&gt;




&lt;div class=&#34;codeheader&#34;&gt;&lt;p&gt;download as &lt;a href=&#34;https://tpapp.github.io/post/log1p/code.jl&#34;&gt;code.jl&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s1770&#34;&gt;# consistent random numbers&lt;/span&gt;
srand(&lt;span class=&#34;s3ee&#34;&gt;UInt32&lt;/span&gt;[&lt;span class=&#34;sc83&#34;&gt;0xfd909253&lt;/span&gt;, &lt;span class=&#34;sc83&#34;&gt;0x7859c364&lt;/span&gt;, &lt;span class=&#34;sc83&#34;&gt;0x7cd42419&lt;/span&gt;, &lt;span class=&#34;sc83&#34;&gt;0x4c06a3b6&lt;/span&gt;])

&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    err(x, [prec])
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;Return two values, which are the log2 relative errors for calculating
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;`log1p(x)`, using `Base.log1p` and `Base.Math.JuliaLibm.log1p`.
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;The errors are calculated by compating to `BigFloat` calculations with the given
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;precision `prec`.
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; err(x, prec &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1024&lt;/span&gt;)
    yb &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; log(&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;BigFloat&lt;/span&gt;(x, prec))
    e2(y) &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3ee&#34;&gt;Float64&lt;/span&gt;(log2(abs(y&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;yb)&lt;span class=&#34;sfa0&#34;&gt;/&lt;/span&gt;abs(yb)))
    e2(log1p(x)), e2(Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;Math&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;JuliaLibm&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;log1p(x))
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;

z &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; exp&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(randn(&lt;span class=&#34;sc84&#34;&gt;20000&lt;/span&gt;)&lt;span class=&#34;sfa0&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;10&lt;/span&gt;)       &lt;span class=&#34;s1770&#34;&gt;# z &amp;gt; 0, Lognormal(0, 10)&lt;/span&gt;
x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;sfa0&#34;&gt;.-&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;                      &lt;span class=&#34;s1770&#34;&gt;# x &amp;gt; -1&lt;/span&gt;
es &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; map(err, x)                &lt;span class=&#34;s1770&#34;&gt;# errors&lt;/span&gt;

&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; Plots; gr()               &lt;span class=&#34;s1770&#34;&gt;# plots&lt;/span&gt;

scatter(log2&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(z), first&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(es), xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2(x+1)&amp;#34;&lt;/span&gt;, ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2 error of Base.log1p&amp;#34;&lt;/span&gt;,
        legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;)
hline!(log2(eps())&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;[&lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;])
Plots&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;svg(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Base_log1p_error.svg&amp;#34;&lt;/span&gt;)
scatter(log2&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(z), last&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(es) &lt;span class=&#34;sfa0&#34;&gt;.-&lt;/span&gt; first&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(es), xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2(x+1)&amp;#34;&lt;/span&gt;,
        ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;improvement (Base.Math.JuliaLibm.log1p)&amp;#34;&lt;/span&gt;, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;)
Plots&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;svg(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;JuliaLibm_improvement.svg&amp;#34;&lt;/span&gt;)
scatter(log2&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(z), last&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(es), xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2(x+1)&amp;#34;&lt;/span&gt;,
        ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2 error of Base.Math.JuliaLibm.log1p&amp;#34;&lt;/span&gt;, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;)
hline!(log2(eps())&lt;span class=&#34;sfa0&#34;&gt;-&lt;/span&gt;[&lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;])
Plots&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;svg(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;JuliaLibm_log1p_error.svg&amp;#34;&lt;/span&gt;)

&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;# WARNING: these run for a very long time&lt;/span&gt;
&lt;span class=&#34;s1770&#34;&gt;######################################################################&lt;/span&gt;
&lt;span class=&#34;s3e8&#34;&gt;using&lt;/span&gt; BenchmarkTools

z &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; exp&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(vcat(randn(&lt;span class=&#34;sc84&#34;&gt;200&lt;/span&gt;)&lt;span class=&#34;sfa0&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;10&lt;/span&gt;, rand(&lt;span class=&#34;sc84&#34;&gt;200&lt;/span&gt;)&lt;span class=&#34;sfa0&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;sc82&#34;&gt;0.1&lt;/span&gt;)) &lt;span class=&#34;s1770&#34;&gt;# z &amp;gt; 0, more values around &lt;/span&gt;
x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; z &lt;span class=&#34;sfa0&#34;&gt;.-&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;                                   &lt;span class=&#34;s1770&#34;&gt;# x &amp;gt; -1&lt;/span&gt;
b1 &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;s7d6&#34;&gt;@belapsed&lt;/span&gt; log1p(&lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;x) &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x]        &lt;span class=&#34;s1770&#34;&gt;# WARNING: takes forever&lt;/span&gt;
b2 &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;s7d6&#34;&gt;@belapsed&lt;/span&gt; Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;Math&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;JuliaLibm&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;log1p(&lt;span class=&#34;sfa0&#34;&gt;$&lt;/span&gt;x) &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;s3ec&#34;&gt;in&lt;/span&gt; x] &lt;span class=&#34;s1770&#34;&gt;# ditto&lt;/span&gt;

scatter(log2&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;(z), b2 &lt;span class=&#34;sfa0&#34;&gt;./&lt;/span&gt; b1, xlab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;log2(x+1)&amp;#34;&lt;/span&gt;,
        ylab &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;time Math.JuliaLibm.log1p / log1p&amp;#34;&lt;/span&gt;, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;, yticks &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;sc82&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;sc82&#34;&gt;1.2&lt;/span&gt;)
hline!([&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;])
Plots&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;svg(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;relative_time.svg&amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title type="html">Emacs customizations for julia-mode</title>
    <link href="https://tpapp.github.io/post/emacs-julia-customizations/"/>
    <id>https://tpapp.github.io/post/emacs-julia-customizations/</id>
    <published>2017-08-28T14:41:58+02:00</published>
    <updated>2017-08-28T14:41:58+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/emacs-julia-customizations/">

&lt;p&gt;I find the following customizations very useful for &lt;em&gt;editing&lt;/em&gt; Julia
code in Emacs. Add them to &lt;code&gt;julia-mode-hook&lt;/code&gt;, eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;customize-julia-mode&lt;/span&gt; ()
  &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Customize julia-mode.&amp;#34;&lt;/span&gt;
  (&lt;span class=&#34;s7e3&#34;&gt;interactive&lt;/span&gt;)
  &lt;span class=&#34;s1770&#34;&gt;;; my customizations go here&lt;/span&gt;
  )

(&lt;span class=&#34;s7e3&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;julia-mode-hook&lt;/span&gt; &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;customize-julia-mode&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;highlight-fixme-todo&#34;&gt;Highlight FIXME/TODO/&amp;hellip;&lt;/h2&gt;

&lt;p&gt;When I just want to note something in a comment for future reference,
I prefer to have certain words highlighted. You can use something like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;nil&lt;/span&gt;
                        &lt;span class=&#34;sfa0&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\\&amp;lt;\\(FIXME\\|TODO\\|QUESTION\\|NOTE\\)&amp;#34;&lt;/span&gt;
                        &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;font-lock-warning-face&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;t&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is what it looks like:&lt;/p&gt;

&lt;pre style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;
            chklapackerror&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;info&lt;span style=&#34;color: #262626;&#34;&gt;[])&lt;/span&gt;
            &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;if&lt;/span&gt; any&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;ifail .!= 0&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #008b45;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #f71010; font-weight: bold;&#34;&gt;TODO&lt;/span&gt;&lt;span style=&#34;color: #008b45;&#34;&gt;: better error message / type
&lt;/span&gt;                error&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #fa5151;&#34;&gt;&#34;failed to converge eigenvectors:\n$(nonzeros(ifail))&#34;&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;highlight-symbols&#34;&gt;Highlight symbols&lt;/h2&gt;

&lt;p&gt;After&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;highlight-symbol&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;add a hook for&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;local-set-key&lt;/span&gt; [(&lt;span class=&#34;s7e3&#34;&gt;control&lt;/span&gt; &lt;span class=&#34;sc21&#34;&gt;?c&lt;/span&gt;) &lt;span class=&#34;sc21&#34;&gt;?s&lt;/span&gt;] &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;highlight-symbol-at-point&lt;/span&gt;)
(&lt;span class=&#34;s7e3&#34;&gt;local-set-key&lt;/span&gt; [(&lt;span class=&#34;s7e3&#34;&gt;control&lt;/span&gt; &lt;span class=&#34;sc21&#34;&gt;?c&lt;/span&gt;) &lt;span class=&#34;sc21&#34;&gt;?n&lt;/span&gt;] &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;highlight-symbol-next&lt;/span&gt;)
(&lt;span class=&#34;s7e3&#34;&gt;local-set-key&lt;/span&gt; [(&lt;span class=&#34;s7e3&#34;&gt;control&lt;/span&gt; &lt;span class=&#34;sc21&#34;&gt;?c&lt;/span&gt;) &lt;span class=&#34;sc21&#34;&gt;?p&lt;/span&gt;] &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;highlight-symbol-prev&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This highlights symbols with &lt;code&gt;C-c s&lt;/code&gt;:&lt;/p&gt;

&lt;pre style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;
&lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #2c53ca;&#34;&gt;issymmetric&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000; background-color: #ffff00;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;AbstractMatrix&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;
    indsm, indsn = indices&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000; background-color: #ffff00;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;if&lt;/span&gt; indsm != indsn
        &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #259ea2;&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;for&lt;/span&gt; i = first&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;indsn&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;:last&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;indsn&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;, j = &lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;:last&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;indsn&lt;span style=&#34;color: #262626;&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000; background-color: #ffff00;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;[&lt;/span&gt;i,j&lt;span style=&#34;color: #262626;&#34;&gt;]&lt;/span&gt; != transpose&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000; background-color: #ffff00;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;[&lt;/span&gt;j,i&lt;span style=&#34;color: #262626;&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #259ea2;&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #259ea2;&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;fill-docstrings&#34;&gt;Fill docstrings&lt;/h2&gt;

&lt;p&gt;This is useful if you want to use &lt;code&gt;M-q&lt;/code&gt; on docstrings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;julia-fill-string&lt;/span&gt; ()
  &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Fill a docstring, preserving newlines before and after triple quotation marks.&amp;#34;&lt;/span&gt;
  (&lt;span class=&#34;s7e3&#34;&gt;interactive&lt;/span&gt;)
  (&lt;span class=&#34;s7e3&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;transient-mark-mode&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;mark-active&lt;/span&gt;)
      (&lt;span class=&#34;s7e3&#34;&gt;fill-region&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;region-beginning&lt;/span&gt;) (&lt;span class=&#34;s7e3&#34;&gt;region-end&lt;/span&gt;) &lt;span class=&#34;s7d5&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;t&lt;/span&gt;)
    (&lt;span class=&#34;s7e3&#34;&gt;cl-flet&lt;/span&gt; ((&lt;span class=&#34;s7e3&#34;&gt;fill-if-string&lt;/span&gt; ()
                              (&lt;span class=&#34;s7e3&#34;&gt;when&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;or&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;looking-at&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;rx&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;
                                                        (&lt;span class=&#34;s7e3&#34;&gt;group&lt;/span&gt;
                                                         (&lt;span class=&#34;s7e3&#34;&gt;*?&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;or&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\\&amp;#34;&lt;/span&gt;))
                                                                 (&lt;span class=&#34;s7e3&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\\&amp;#34;&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;anything&lt;/span&gt;))))
                                                        &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;))
                                        (&lt;span class=&#34;s7e3&#34;&gt;looking-at&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;rx&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;
                                                        (&lt;span class=&#34;s7e3&#34;&gt;group&lt;/span&gt;
                                                         (&lt;span class=&#34;s7e3&#34;&gt;*?&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;or&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\\&amp;#34;&lt;/span&gt;))
                                                                 (&lt;span class=&#34;s7e3&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\\&amp;#34;&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;anything&lt;/span&gt;))))
                                                        &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;)))
                                (&lt;span class=&#34;s7e3&#34;&gt;let&lt;/span&gt; ((&lt;span class=&#34;s7e3&#34;&gt;start&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;match-beginning&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;))
                                      (&lt;span class=&#34;s7e3&#34;&gt;end&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;match-end&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;)))
                                  &lt;span class=&#34;s1770&#34;&gt;;; (ess-blink-region start end)&lt;/span&gt;
                                  (&lt;span class=&#34;s7e3&#34;&gt;fill-region&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;nil&lt;/span&gt;)))))
      (&lt;span class=&#34;s7e3&#34;&gt;save-excursion&lt;/span&gt;
        (&lt;span class=&#34;s7e3&#34;&gt;let&lt;/span&gt; ((&lt;span class=&#34;s7e3&#34;&gt;s&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;syntax-ppss&lt;/span&gt;)))
          (&lt;span class=&#34;s7e3&#34;&gt;when&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;fourth&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;s&lt;/span&gt;) (&lt;span class=&#34;s7e3&#34;&gt;goto-char&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;ninth&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;s&lt;/span&gt;))))
        (&lt;span class=&#34;s7e3&#34;&gt;fill-if-string&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Add&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;local-set-key&lt;/span&gt; (&lt;span class=&#34;s7e3&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;M-q&amp;#34;&lt;/span&gt;) &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;julia-fill-string&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to the mode hook.&lt;/p&gt;

&lt;h2 id=&#34;highlight-things-after-column-80&#34;&gt;Highlight things after column 80&lt;/h2&gt;

&lt;p&gt;I add this to the mode hook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;set-fill-column&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;80&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I also use &lt;code&gt;whitespace&lt;/code&gt; globally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;sc2c&#34;&gt;&amp;#39;whitespace&lt;/span&gt;)
(&lt;span class=&#34;s7e3&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;whitespace-style&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span class=&#34;s7e3&#34;&gt;face&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;empty&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;tabs&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;lines-tail&lt;/span&gt; &lt;span class=&#34;s7e3&#34;&gt;trailing&lt;/span&gt;))
(&lt;span class=&#34;s7e3&#34;&gt;global-whitespace-mode&lt;/span&gt; &lt;span class=&#34;s7d5&#34;&gt;t&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is what it looks like:&lt;/p&gt;

&lt;pre style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;
    QR&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T,S&lt;span style=&#34;color: #262626;&#34;&gt;}(&lt;/span&gt;factors&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;AbstractMatrix&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T&lt;span style=&#34;color: #262626;&#34;&gt;}&lt;/span&gt;, &amp;#964;&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;Vector&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T&lt;span style=&#34;color: #262626;&#34;&gt;})&lt;/span&gt; where &lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T,S&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;&amp;lt;:&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;AbstractMatrix&lt;/span&gt;&lt;span style=&#34;color: #262626; background-color: #f6f0e1;&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;background-color: #f6f0e1;&#34;&gt; = new&lt;/span&gt;&lt;span style=&#34;color: #262626; background-color: #f6f0e1;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f6f0e1;&#34;&gt;factors, &amp;#964;&lt;/span&gt;&lt;span style=&#34;color: #262626; background-color: #f6f0e1;&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #2020cc; font-weight: bold;&#34;&gt;end&lt;/span&gt;
QR&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;factors&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;AbstractMatrix&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T&lt;span style=&#34;color: #262626;&#34;&gt;}&lt;/span&gt;, &amp;#964;&lt;span style=&#34;color: #262626; background-color: #ded6c5;&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #9400d3;&#34;&gt;Vector&lt;/span&gt;&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T&lt;span style=&#34;color: #262626;&#34;&gt;})&lt;/span&gt; where &lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T&lt;span style=&#34;color: #262626;&#34;&gt;}&lt;/span&gt; = QR&lt;span style=&#34;color: #262626;&#34;&gt;{&lt;/span&gt;T,typeof&lt;span style=&#34;color: #262626;&#34;&gt;(&lt;/span&gt;factors&lt;span style=&#34;color: #262626;&#34;&gt;)}(&lt;/span&gt;f&lt;span style=&#34;background-color: #f6f0e1;&#34;&gt;actors, &amp;#964;&lt;/span&gt;&lt;span style=&#34;color: #262626; background-color: #f6f0e1;&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;hungry-delete-mode&#34;&gt;Hungry delete-mode&lt;/h2&gt;

&lt;p&gt;Add this to the mode hook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span class=&#34;s7e3&#34;&gt;hungry-delete-mode&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;and then backspace and delete will remove all whitespace near the point in the relevant direction.&lt;/p&gt;

&lt;p&gt;In case you are wondering, the theme is &lt;a href=&#34;https://github.com/alezost/alect-themes&#34;&gt;alect-light&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Local packages in a separate directory in Julia</title>
    <link href="https://tpapp.github.io/post/julia-local-test/"/>
    <id>https://tpapp.github.io/post/julia-local-test/</id>
    <published>2017-08-23T10:10:48+02:00</published>
    <updated>2017-08-23T10:10:48+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/julia-local-test/">&lt;p&gt;I run &lt;code&gt;Pkg.update()&lt;/code&gt; fairly often to stay up to date and benefit from
the latest improvements of various packages. I rarely ever &lt;code&gt;pin&lt;/code&gt; to a
specific package version, but I occasionally checkout &lt;code&gt;master&lt;/code&gt; for
some packages, especially if I am contributing.&lt;/p&gt;

&lt;p&gt;Despite updating regularly, I found that the documentation subtly diverged from what I was experiencing for some packages. After looking into the issue, I learned that I was 2&amp;ndash;3 minor versions behind despite updating regularly. For example, when I would&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;Pkg&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;update(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;ForwardDiff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I would be told that there is a new version, and to get it I should update &lt;code&gt;ReverseDiff&lt;/code&gt; and &lt;code&gt;Optim&lt;/code&gt;. But&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;Pkg&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;update(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;ForwardDiff&amp;#34;&lt;/span&gt;, &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;ReverseDiff&amp;#34;&lt;/span&gt;, &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Optim&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;would just run quietly without updating.&lt;/p&gt;

&lt;p&gt;I could not figure out the cause for this and did not want to get sidetracked debugging it, so I decided to wipe the package directory and start over. However, in order to do this, I had to make sure that no code is lost, especially for local packages. First, I moved my local packages into a separate directory, and added that to &lt;code&gt;LOAD_PATH&lt;/code&gt; in &lt;code&gt;.juliarc.jl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;push!(&lt;span class=&#34;s7d2&#34;&gt;LOAD_PATH&lt;/span&gt;, expanduser(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;~/src/julia-local-packages/&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then I ran &lt;a href=&#34;https://github.com/fboender/multi-git-status&#34;&gt;multi-git-status&lt;/a&gt; to make sure that there were no unpushed changes. Finally, I deleted the package directory and reinstalled everything. Surprisingly, &lt;code&gt;Pkg.add&lt;/code&gt; ran much faster than before.&lt;/p&gt;

&lt;p&gt;In case I have to do this again, I decided to keep my local packages separate &amp;mdash; the only drawback is that &lt;code&gt;Pkg.test&lt;/code&gt; now can&amp;rsquo;t find them. A workaround is below, using some code from &lt;code&gt;Base.Pkg&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    local_test(pkgname, [coverage])
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;Find and test a package in `LOAD_PATH`. Useful when the package is outside
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;`Pkg.dir()`.
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;Assumes the usual directory structure: package has the same name as the module,
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;the main file is in `src/Pkgname.jl`, while tests are in `test/runtests.jl`.
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; local_test(pkgname; coverage&lt;span class=&#34;sfa0&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;s3ee&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;)
    module_path &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;find_in_path(pkgname, &lt;span class=&#34;s7d2&#34;&gt;nothing&lt;/span&gt;)
    src_dir, module_file &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; splitdir(module_path)
    dir &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; normpath(src_dir, &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;)
    test_path &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; joinpath(dir, &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;runtests.jl&amp;#34;&lt;/span&gt;)
    &lt;span class=&#34;s7d6&#34;&gt;@assert&lt;/span&gt; isfile(test_path) &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;Could not find &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$&lt;/span&gt;(test_path)&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&lt;/span&gt;
    Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;cd(dir) &lt;span class=&#34;s3e8&#34;&gt;do&lt;/span&gt;
        &lt;span class=&#34;s3e8&#34;&gt;try&lt;/span&gt;
            color &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;have_color&lt;span class=&#34;sfa0&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;--color=yes&amp;#34;&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;--color=no&amp;#34;&lt;/span&gt;
            codecov &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; coverage&lt;span class=&#34;sfa0&#34;&gt;?&lt;/span&gt; [&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;--code-coverage=user&amp;#34;&lt;/span&gt;] &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;--code-coverage=none&amp;#34;&lt;/span&gt;]
            compilecache &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;--compilecache=&amp;#34;&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;*&lt;/span&gt; (&lt;span class=&#34;s3ee&#34;&gt;Bool&lt;/span&gt;(Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;JLOptions()&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;use_compilecache) &lt;span class=&#34;sfa0&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt; &lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;)
            julia_exe &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;julia_cmd()
            run(&lt;span class=&#34;sc1c&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$julia_exe&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; --check-bounds=yes &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$codecov&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$color&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$compilecache&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$test_path&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;`&lt;/span&gt;)
            info(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$module_file&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; tests passed&amp;#34;&lt;/span&gt;)
        &lt;span class=&#34;s3e8&#34;&gt;catch&lt;/span&gt; err
            Base&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;Pkg&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;Entry&lt;span class=&#34;sfa0&#34;&gt;.&lt;/span&gt;warnbanner(err, label&lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;[ ERROR: &lt;/span&gt;&lt;span class=&#34;sc27&#34;&gt;$module_file&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt; ]&amp;#34;&lt;/span&gt;)
        &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Compared to simply &lt;code&gt;include(&amp;quot;wherever-it-is/runtests.jl&amp;quot;)&lt;/code&gt;, this has the advantage of running a separate Julia process, so your workspace does not contaminate the test environment and in case of segfaults, the parent process won&amp;rsquo;t be affected.&lt;/p&gt;

&lt;p&gt;Hopefully, the code above will be obsolete once &lt;a href=&#34;https://github.com/StefanKarpinski/Pkg3.jl&#34;&gt;Pkg3&lt;/a&gt; is released, but until then it is a useful workaround.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;: function above was corrupted during copy-paste, corrected.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Emacs 25.2 on Ubuntu</title>
    <link href="https://tpapp.github.io/post/emacs25-ubuntu/"/>
    <id>https://tpapp.github.io/post/emacs25-ubuntu/</id>
    <published>2017-07-03T10:49:56+02:00</published>
    <updated>2017-07-03T10:49:56+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/emacs25-ubuntu/">&lt;p&gt;Emacs is undoubtedly the most important program on my computers. On my
laptop, I use it to keep track of stuff with &lt;a href=&#34;http://orgmode.org/&#34;&gt;org-mode&lt;/a&gt;, read mail with &lt;a href=&#34;https://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt;, edit LaTeX with &lt;a href=&#34;https://www.gnu.org/software/auctex/&#34;&gt;AUCTeX&lt;/a&gt;, and of course program. On servers, the first alias I define is usually &lt;code&gt;qe=&#39;emacs -Q -nw&#39;&lt;/code&gt;, which give me a fast and responsive editor. With &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;, doing just about anything (eg locating files, &lt;code&gt;rgrep&lt;/code&gt;ing for something) is orders of magnitude faster and more convenient than any alternative I have tried.&lt;/p&gt;

&lt;p&gt;I also try to keep up with the latest versions for software in general. Usually, whatever Ubuntu stable/Debian testing has is good enough not to justify the extra effort, but when I really need it, I grab the source and compile. That is usually only a minor hassle, but I try to restrict it to a few critical programs, otherwise it adds up. The major issue is not compiling, but having cruft in the filesystem (despite &lt;a href=&#34;https://www.gnu.org/software/stow/manual/stow.html&#34;&gt;stow&lt;/a&gt; and &lt;a href=&#34;https://wiki.debian.org/CheckInstall&#34;&gt;checkinstall&lt;/a&gt;, it piles up). So I try to avoid it if I can.&lt;/p&gt;

&lt;p&gt;Emacs 25.2 was released in April 2017, but there is no sign of an Ubuntu package for it yet. On various forums the &lt;a href=&#34;https://launchpad.net/~kelleyk/+archive/ubuntu/emacs&#34;&gt;PPA of kelleyk&lt;/a&gt; is recommended, but that does not have 25.2 for 17.04 (some files clash if you install previous versions).&lt;/p&gt;

&lt;p&gt;Fortunately, Robert Bruce Park has now added Emacs 25.2 to the &lt;a href=&#34;https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa&#34;&gt;Ubuntu Emacs Lisp PPA&lt;/a&gt;, so having the latest of your favorite editor is only an &lt;code&gt;add-apt-repository&lt;/code&gt; away. You may want to add a file to &lt;code&gt;/etc/apt/preferences.d&lt;/code&gt; with contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package: *
Pin: release o=LP-PPA-ubuntu-elisp
Pin-Priority: 600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to make sure the right packages are installed.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Sampling variation in effective sample size estimates (MCMC)</title>
    <link href="https://tpapp.github.io/post/ess-sampling/"/>
    <id>https://tpapp.github.io/post/ess-sampling/</id>
    <published>2017-06-12T16:25:57+02:00</published>
    <updated>2017-06-12T16:25:57+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/ess-sampling/">&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;MCMC samples, used in Bayesian statistics, are not independent --- in fact, unless one uses specialized methods or &lt;a href=&#34;https://arxiv.org/abs/1701.02434&#34;&gt;modern HMC&lt;/a&gt;, posterior draws are usually at highly autocorrelated. For independent draws,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\text{variance of simulation mean} \propto \frac1N
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(N\)&lt;/span&gt; is the sample size, but for correlated draws, one has to scale the sample size with a factor&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\tau = \frac{1}{1+2\sum_{k=1}^\infty \rho_k}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(\rho_k\)&lt;/span&gt; is the lag-&lt;span  class=&#34;math&#34;&gt;\(k\)&lt;/span&gt; autocorrelation. &lt;span  class=&#34;math&#34;&gt;\(\tau N\)&lt;/span&gt; is the &lt;em&gt;effective sample size&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Usually, &lt;span  class=&#34;math&#34;&gt;\(\rho_k\)&lt;/span&gt; is estimated from the data using the variogram&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
V_k = \frac{1}{N-k} \sum_{i=1}^{N-k} x_i x_{i+k}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;from which we obtain&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\rho_k = 1-\frac{V_k}{2\text{var}(x)}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where an estimator for the variance is also used. Then, to avoid using noisy estimates, we only add up to the last &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt; where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\rho_{K} + \rho_{K+1} \ge 0
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I will call &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt; the &lt;em&gt;last lag&lt;/em&gt;. &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; does something slightly different, using FFT for autocorrelations, and cutting off at the first negative &lt;span  class=&#34;math&#34;&gt;\(\rho_K\)&lt;/span&gt;, but for HMC this does not make a whole lot of difference.&lt;/p&gt;

&lt;h2 id=&#34;the-sampling-variation&#34;&gt;The sampling variation&lt;/h2&gt;

&lt;p&gt;I was coding up the above calculation, and needed some unit tests. Surprisignly, I could not find anything on the sampling variation of &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, so I wrote some simulations in Julia (&lt;a href=&#34;../ess-sampling.jl&#34;&gt;source code for everything&lt;/a&gt;). I did the following simulation exercise:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for a given autocorrelation coefficient &lt;span  class=&#34;math&#34;&gt;\(\phi\)&lt;/span&gt;, simulate &lt;span  class=&#34;math&#34;&gt;\(N\)&lt;/span&gt; draws from the AR(1) process
&lt;span  class=&#34;math&#34;&gt;\(
x_t = \phi x_{t-1} + \sigma \epsilon_t
\qquad
\epsilon_t \sim \text{Normal}(0,1), \text{IID}
\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;calculate &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;repeat 1000 times and plot the results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use &lt;span  class=&#34;math&#34;&gt;\(N=1000\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(N=10000\)&lt;/span&gt;, as these would be typical sample sizes, first for a fairly efficient algorithm, then for a more stubborn but still manageable posterior.&lt;/p&gt;

&lt;h2 id=&#34;iid-samples&#34;&gt;IID samples&lt;/h2&gt;

&lt;p&gt;Let &lt;span  class=&#34;math&#34;&gt;\(\phi=0\)&lt;/span&gt;, then we expect &lt;span  class=&#34;math&#34;&gt;\(\tau=1\)&lt;/span&gt; (red line in histogram, coefficient of variation on top).&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0\)&lt;/span&gt; (IID), &lt;span  class=&#34;math&#34;&gt;\(N=1000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi0N1000.svg&#34; alt=&#34;Results with $$\phi=0$$ (IID), $$N=1000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0\)&lt;/span&gt; (IID), &lt;span  class=&#34;math&#34;&gt;\(N=10000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi0N10000.svg&#34; alt=&#34;Results with $$\phi=0$$ (IID), $$N=10000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;span  class=&#34;math&#34;&gt;\(1000\)&lt;/span&gt; samples, there is a lot of variation in ESS: 800 could show up very easily in practice. &lt;span  class=&#34;math&#34;&gt;\(600\)&lt;/span&gt; is not improbable either. Using up to &lt;span  class=&#34;math&#34;&gt;\(10\)&lt;/span&gt; lags is not uncommon. For &lt;span  class=&#34;math&#34;&gt;\(10000\)&lt;/span&gt; samples, the precision is improved considerably, we commonly use &lt;span  class=&#34;math&#34;&gt;\(2\)&lt;/span&gt; or &lt;span  class=&#34;math&#34;&gt;\(4\)&lt;/span&gt; lags. For both sample sizes, notice the high correlation between the last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, and &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;: given the method above, using more lags increases &lt;span  class=&#34;math&#34;&gt;\(\tau^{-1}\)&lt;/span&gt;, so this is to be expected.&lt;/p&gt;

&lt;h2 id=&#34;ar1-samples-with-rho05&#34;&gt;AR(1) samples with &lt;span  class=&#34;math&#34;&gt;\(\rho=0.5\)&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This is a more autocorrelated process, here theory tells us that &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;=1/3.&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0.5\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(N=1000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi05N1000.svg&#34; alt=&#34;Results with $$\phi=0.5$$, $$N=1000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0.5\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(N=10000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi05N10000.svg&#34; alt=&#34;Results with $$\phi=0.5$$, $$N=10000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;Notice that &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt; is now more dispersed, compared to the IID case. Even with 10000 samples, the coefficient of variation is 6%, with 1000 it is around 1/6. In practice, expect effective sample sizes all over the place.&lt;/p&gt;

&lt;h2 id=&#34;ar1-samples-with-rho08&#34;&gt;AR(1) samples with &lt;span  class=&#34;math&#34;&gt;\(\rho=0.8\)&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This is an even more autocorrelated process, here theory tells us that &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;=1/9.&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0.8\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(N=1000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi08N1000.svg&#34; alt=&#34;Results with $$\phi=0.8$$, $$N=1000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;Results with &lt;span  class=&#34;math&#34;&gt;\(\phi=0.8\)&lt;/span&gt;, &lt;span  class=&#34;math&#34;&gt;\(N=10000\)&lt;/span&gt;. (a) &lt;span  class=&#34;math&#34;&gt;\(\tau\)&lt;/span&gt;, (b) last lag &lt;span  class=&#34;math&#34;&gt;\(K\)&lt;/span&gt;, (c) scatterplot.


&lt;img src=&#34;https://tpapp.github.io/post/ess-sampling/ess-phi08N10000.svg&#34; alt=&#34;Results with $$\phi=0.8$$, $$N=10000$$. (a) $$\tau$$, (b) last lag $$K$$, (c) scatterplot.&#34;&gt;
&lt;/p&gt;

&lt;p&gt;There is now so much variation that in order to get an estimate for ESS that we can use for comparing various MCMC implementations, we need to run much more than &lt;span  class=&#34;math&#34;&gt;\(1000\)&lt;/span&gt; samples.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For unit testing ESS calculations, I will need to use 10000 samples, with &lt;span  class=&#34;math&#34;&gt;\(\pm10\)&lt;/span&gt; or similar error bands.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As a rule of thumb, I would ignore less than 1.5x variation in ESS for 1000 samples, or run longer chains: it may be just random noise.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;bibliography&#34;&gt;Bibliography&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gelman, Andrew, et al. 2013. Bayesian data analysis. 3rd edition. Chapman &amp;amp; Hall/CRC.&lt;/li&gt;
&lt;li&gt;Stan Development Team. 2016. Stan Modeling Language Users Guide and Reference Manual, Version 2.15.0. &lt;a href=&#34;http://mc-stan.org&#34;&gt;http://mc-stan.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Blog redesign</title>
    <link href="https://tpapp.github.io/post/blog-redesign/"/>
    <id>https://tpapp.github.io/post/blog-redesign/</id>
    <published>2017-06-12T14:12:43+02:00</published>
    <updated>2017-06-12T14:12:43+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/blog-redesign/">&lt;p&gt;I am in the process of rebuilding my personal website using &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I tried various themes, including &lt;a href=&#34;https://github.com/gcushen/hugo-academic&#34;&gt;hugo-academic&lt;/a&gt;, but in the process of adapting them to my needs I realized that it is less work to write one from scratch.&lt;/p&gt;

&lt;p&gt;The result is now 80% ready (blog works, automatic listing of research papers will take some more work), and the &lt;a href=&#34;https://github.com/tpapp/tpapp.github.io-source&#34;&gt;source is on Github&lt;/a&gt;. It is available under the CC-BY-SA license, feel free to adapt parts from it, not that there is anything special in there.&lt;/p&gt;

&lt;p&gt;Hugo is really an excellent framework, it is clean, logical, and allows a lot of code reuse. I &lt;del&gt;wasted&lt;/del&gt; spent most of the time on fiddling with CSS, and I am still not 100% satisfied with the result, but at some point I decided to stop. &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SCSS&lt;/a&gt; was extremely useful for writing organized CSS.&lt;/p&gt;

&lt;p&gt;I am especially satisfied with moving the code highlighting to the generator side. The only non-static parts are now &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; and &lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Getting a nice &#43;= in LaTeX math</title>
    <link href="https://tpapp.github.io/post/latex-math-increment/"/>
    <id>https://tpapp.github.io/post/latex-math-increment/</id>
    <published>2017-05-24T12:59:53+02:00</published>
    <updated>2017-05-24T12:59:53+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/latex-math-increment/">&lt;p&gt;I am working on an appendix for a paper that uses MCMC, and I decided to document some &lt;a href=&#34;https://tpapp.github.io/post/jacobian-chain/&#34;&gt;change of varible calculations&lt;/a&gt; in the interest of reproducibility (they are quite complex, because of multivariate determinants). But how can I typeset them nicely in $\LaTeX$?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;\mathtt{target} += J_f&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;gives
$$
\mathtt{target} += J_f
$$
which is to be expected, as &lt;code&gt;+&lt;/code&gt; is a binary operator and &lt;code&gt;=&lt;/code&gt; is a relation, so $\LaTeX$ is not expecting them to show up this way.&lt;/p&gt;

&lt;p&gt;We can remedy this as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;\mathtt{target} \mathrel{+}= J_f&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;which shows up as
$$
\mathtt{target} \mathrel{+}= J_f
$$
which is an improvement, but is still not visually appealing.&lt;/p&gt;

&lt;p&gt;Making the &lt;code&gt;+&lt;/code&gt; a bit smaller with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;\mathrel{\raisebox{0.19ex}{$\scriptstyle+$}}=}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;yields
$$
\mathtt{target} \mathrel{\raise{0.19ex}{\scriptstyle+}} = J_f
$$
which looks OK enough to preclude further tweaking. Note that &lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; does not support &lt;code&gt;\raisebox&lt;/code&gt;, but you can use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;\mathrel{\raise{0.19ex}{\scriptstyle+}} = J_f&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;which renders the as above.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Two tricks for change of variables in MCMC</title>
    <link href="https://tpapp.github.io/post/jacobian-chain/"/>
    <id>https://tpapp.github.io/post/jacobian-chain/</id>
    <published>2017-05-23T16:39:26+02:00</published>
    <updated>2017-05-23T16:39:26+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/jacobian-chain/">&lt;p&gt;Change of variables are sometimes advantageous, and occasionally inevitable for MCMC if you want efficient sampling, or to model a distribution that was obtained by a transformation. A classic example is the &lt;em&gt;lognormal distribution&lt;/em&gt;: when&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\log(y) \sim N(\mu, \sigma^2)\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;one has to adjust the log posterior by &lt;span  class=&#34;math&#34;&gt;\(-\log y\)&lt;/span&gt; since&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{\partial \log(y)}{\partial y} = \frac{1}{y}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\log(1/y) = -\log(y).\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt;, one would accomplish this as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-stan&#34; data-lang=&#34;stan&#34;&gt;target += -log(y)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In general, when you transform using a multivariate function &lt;span  class=&#34;math&#34;&gt;\(f\)&lt;/span&gt;, you would adjust by&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\log\det J_f(y)\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;which is the log of the determinant of the Jacobian — some texts
simply refer to this as &amp;quot;the Jacobian&amp;quot;.&lt;/p&gt;

&lt;p&gt;The above is well-known, but the following two tricks are worth mentioning.&lt;/p&gt;

&lt;h2 id=&#34;chaining-transformations&#34;&gt;Chaining transformations&lt;/h2&gt;

&lt;p&gt;Suppose that you are changing a variable by using a chain of two
functions &lt;span  class=&#34;math&#34;&gt;\(f \circ g\)&lt;/span&gt;. Then&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\log\det J_{f \circ g}(y) = \log \bigl(\det J_f(g(y)) \cdot \det J_g(y)\bigr) \\\\
= \log\det J_f(g(y)) + \log\det J_g(y)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;which means that you can simply add (the log determinant of) the
Jacobians, of course evaluated at the appropriate points.&lt;/p&gt;

&lt;p&gt;This is very useful when &lt;span  class=&#34;math&#34;&gt;\(f \circ g\)&lt;/span&gt; is complicated and &lt;span  class=&#34;math&#34;&gt;\(J_{f\circ g}\)&lt;/span&gt;
is tedious to derive, or if you want to use multiple &lt;span  class=&#34;math&#34;&gt;\(f\)&lt;/span&gt;s or &lt;span  class=&#34;math&#34;&gt;\(g\)&lt;/span&gt;s and
economize on the algebra.  From the above, it is also easy to see that this
generalizes to arbitrarily long chains of functions &lt;span  class=&#34;math&#34;&gt;\(f_1 \circ f_2 \circ \dots\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;This trick turned out to be very useful when I was fitting a model
where a transformation was general to both equilibrium concepts I was
using (a noncooperative game and a social planner), so I could save on
code. Of course, since
&lt;a href=&#34;https://github.com/stan-dev/stan/issues/2224&#34;&gt;#2224&lt;/a&gt; is WIP, I had to
copy-paste the code, but still saved quite a bit of work.&lt;/p&gt;

&lt;h2 id=&#34;transforming-a-subset-of-variables&#34;&gt;Transforming a subset of variables&lt;/h2&gt;

&lt;p&gt;Suppose &lt;span  class=&#34;math&#34;&gt;\(x \in \mathbb{R}^m\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(y \in \mathbb{R}^n\)&lt;/span&gt; are vectors, and you are interested in transforming to&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
z = f(x,y)
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(x\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(z\)&lt;/span&gt; have the same dimension. It is useful to think
about this transformation as&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
g(x,y) = [f(x,y), y]^\top
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where &lt;span  class=&#34;math&#34;&gt;\(g : \mathbb{R}^{m+n} \to \mathbb{R}^{m+n}\)&lt;/span&gt;. Since &lt;span  class=&#34;math&#34;&gt;\(y\)&lt;/span&gt; is mapped to itself,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
J_g = \begin{bmatrix}
J_{f,x} &amp; J_{f,y} \\\\
0 &amp; I
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;has a block structure, where&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
J_{f,x} = \frac{\partial f(x,y)}{\partial x}
\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and similarly for &lt;span  class=&#34;math&#34;&gt;\(J_{f,y}\)&lt;/span&gt;. For the calculation of the determinant, you can safely ignore the latter, and &lt;span  class=&#34;math&#34;&gt;\(\log \det I = 0\)&lt;/span&gt;, so&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[
\log\det J_g = \log\det J_{f,x}
\]&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Disabling Privacy Badger</title>
    <link href="https://tpapp.github.io/post/privacy-badger/"/>
    <id>https://tpapp.github.io/post/privacy-badger/</id>
    <published>2017-05-02T16:35:37+02:00</published>
    <updated>2017-05-02T16:35:37+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/privacy-badger/">&lt;p&gt;Firefox has been my primary browser for the last decade. I find it very fast and convenient, and use quite a few addons, including &lt;a href=&#34;https://addons.mozilla.org/en-gb/firefox/addon/google-scholar-button/&#34;&gt;Google Scholar Button&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-gb/firefox/addon/noscript/?src=search&#34;&gt;NoScript&lt;/a&gt;,  and &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/&#34;&gt;uBlock Origin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t recall exactly when, but about half a year ago various sites started to break. I have not bothered to debug what&amp;rsquo;s happening, suspecting it was was a combination of various plugins, but continued to use Firefox and installed &lt;a href=&#34;https://github.com/darktrojan/openwith&#34;&gt;openwith&lt;/a&gt; to open broken pages in Chromium (yes, I know, the ultimate kludge). More sites became broken, and I found that now I am spending 99% of my time in Chromium, which I don&amp;rsquo;t like that much, but moreover, it is a resource hog: while using the plugins above I can get the CPU load of Firefox to around 1&amp;ndash;2% when I am not using it, Chromium drains my laptop battery in effectively half the time. To make things worse, Chromium apparently can&amp;rsquo;t open links in the background like Firefox, and insists on raising the window every time I open a link from another process, which is distracting.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&#34;https://discourse.julialang.org/&#34;&gt;Julia&amp;rsquo;s Discourse forum&lt;/a&gt; started showing up empty, which was the last straw and I went through my plugins. It turns out hat &lt;a href=&#34;https://www.eff.org/privacybadger&#34;&gt;Privacy Badger&lt;/a&gt; was responsible for everything: apparently it relies on heavy-handed heuristics and breaks a lot of webpages. One can report this, but instead of reporting around 10&amp;ndash;20 pages which were broken, I simply removed the plugin. I have a lot of respect for what the Electronic Frontier Foundation does, but I am not sure that this plugin is very useful.&lt;/p&gt;

&lt;p&gt;So finally I got back the web the way I like it. Moral of the story: temporary workarounds become permanent, and bite back.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Blogging with Hugo, Julia, Weave.jl</title>
    <link href="https://tpapp.github.io/post/blogging-weave-julia-hugo/"/>
    <id>https://tpapp.github.io/post/blogging-weave-julia-hugo/</id>
    <published>2017-03-30T10:02:32+02:00</published>
    <updated>2017-03-30T10:02:32+02:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/blogging-weave-julia-hugo/">&lt;p&gt;I have made a PR to &lt;a href=&#34;https://github.com/mpastell/Weave.jl&#34;&gt;Weave.jl&lt;/a&gt; which Matti Pastell kindly merged recently. This allows a relatively smooth workflow for blogging using the static website generator &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, and generating some pages with plots and evaluated Julia results. I made the source for my blog &lt;a href=&#34;https://github.com/tpapp/tpapp.github.io-source&#34;&gt;available&lt;/a&gt; so that others can use it for their own blogging about Julia. An example is &lt;a href=&#34;https://tpapp.github.io/post/hugo-julia-weave/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The gist of the workflow is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;for posts which do not need &lt;code&gt;Weave&lt;/code&gt;, just use &lt;code&gt;Hugo&lt;/code&gt;. Make sure you read their &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;excellent tutorial&lt;/a&gt;. &lt;strong&gt;This very fast&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;for posts which contain Julia code and generated plots, use a script to generate a skeleton file in a separate directory, and work on that. Call another script to generate the &lt;code&gt;.md&lt;/code&gt; file using &lt;code&gt;Weave.jl&lt;/code&gt;. &lt;strong&gt;This is the slow part&lt;/strong&gt;, so it is not automated.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/tpapp/tpapp.github.io-source&#34;&gt;README&lt;/a&gt; gives more details. Feel free to ask questions here. If you have a better workflow, I would like to hear about it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Teaching a course using Julia</title>
    <link href="https://tpapp.github.io/post/teaching-a-course/"/>
    <id>https://tpapp.github.io/post/teaching-a-course/</id>
    <published>2017-03-24T14:34:22+01:00</published>
    <updated>2017-03-24T14:34:22+01:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/teaching-a-course/">

&lt;p&gt;I just finished teaching a graduate course on practical aspects of dynamic optimization to our economics students. This year, for the first time, I taught the course using Julia, and this is a writeup of the experience. This was an intensive, 10-week course, with two classes per week, taught in the computer lab. A course on the theory of dynamic optimization was a prerequisite, this one was all about the actual numerical methods. The students had prior exposure to R and Matlab, and some of them have been using Julia for a while. In some classes, I talked about theory, sometimes I wrote code, ran it, and made improved versions, sometimes we treated the class as a practice session.&lt;/p&gt;

&lt;p&gt;I wanted to focus on the actual methods, so I decided to use a subset of the language, &amp;ldquo;Julia light&amp;rdquo;, using the following concepts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scalars, algebra, arrays, indexing&lt;/li&gt;
&lt;li&gt;functions (with very basic dispatch, on an argument that contained problem parameters)&lt;/li&gt;
&lt;li&gt;control flow: &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;comprehension, concatenation&lt;/li&gt;
&lt;li&gt;structures (only &lt;code&gt;immutable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;docstrings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The purpose of the course was to show that one can easily implement seemingly abstract methods encountered in textbooks, dissect them, look at the caveats, and possibly adapt them to particular problems. Writing what I think of as production code would have involved teaching many new concepts to a class coming with very heterogeneous experience in programming, so I decided to steer clear of the following topics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;modules&lt;/li&gt;
&lt;li&gt;macros&lt;/li&gt;
&lt;li&gt;the type system&lt;/li&gt;
&lt;li&gt;writing efficient code (even though we ended up doing a bit on that, and benchmarking, could not resist)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We used &lt;a href=&#34;https://github.com/EconForge/NLsolve.jl&#34;&gt;NLsolve&lt;/a&gt;, &lt;a href=&#34;https://github.com/JuliaNLSolvers/Optim.jl&#34;&gt;Optim&lt;/a&gt;, and &lt;a href=&#34;https://github.com/JuliaPlots/Plots.jl&#34;&gt;Plots&lt;/a&gt; extensively, and &lt;a href=&#34;https://github.com/JuliaDiff/ForwardDiff.jl&#34;&gt;ForwardDiff&lt;/a&gt; under the hood. &lt;a href=&#34;https://github.com/mauro3/Parameters.jl&#34;&gt;Parameters&lt;/a&gt; was very useful for clean code.&lt;/p&gt;

&lt;h2 id=&#34;perspective-of-the-instructor&#34;&gt;Perspective of the instructor&lt;/h2&gt;

&lt;p&gt;Even when I wrote something in a suboptimal manner, it turned out to be fast enough. Julia is great in that respect. However, compilation time dominated almost everything that we did, especially for plots.&lt;/p&gt;

&lt;p&gt;I was using Jupyter notebooks, inspired by &lt;a href=&#34;https://math.mit.edu/classes/18.S096/iap17/&#34;&gt;18.S096&lt;/a&gt;. While I am much, much slower writing code in Jupyter compared to Emacs, I think that this turned out to be a benefit: jumping around between windows is very difficult to follow. &lt;a href=&#34;https://github.com/JuliaGizmos/Interact.jl&#34;&gt;Interact&lt;/a&gt; was just great.&lt;/p&gt;

&lt;p&gt;I made a small package for code we wrote in class, and distributed new code via &lt;code&gt;Pkg.update()&lt;/code&gt;. This worked well most of the time.&lt;/p&gt;

&lt;p&gt;We were using &lt;code&gt;v0.5.0&lt;/code&gt; and later transitioned to &lt;code&gt;v0.5.1&lt;/code&gt;, which was seamless.&lt;/p&gt;

&lt;p&gt;Since I was not using modules, sometimes the best way to extricate myself from a state was restarting the kernel. This became a running joke among the students (&amp;ldquo;when in doubt, restart the kernel&amp;rdquo;). This actually worked very well for the infamous &lt;a href=&#34;https://github.com/julialang/julia/issues/265&#34;&gt;#265&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jupyter is great for interactive notes in class. I mixed a great deal of marked up text and LaTeX equations into the workbooks. Problem sets were handed in using Jupyter notebooks, and the exam (solving a dynamic programming problem) was also written in and graded as a notebook.&lt;/p&gt;

&lt;p&gt;Unicode specials are addictive. Once you learn about &lt;code&gt;α&lt;/code&gt;, you never name a variable &lt;code&gt;alpha&lt;/code&gt; again.&lt;/p&gt;

&lt;h2 id=&#34;perspective-of-the-students&#34;&gt;Perspective of the students&lt;/h2&gt;

&lt;p&gt;I talked to the class at the end of the course about their experience with Julia, and some of them individually. The biggest issue for them was lack of easily searchable answers to common questions: for R and Matlab, a &amp;ldquo;how do you &amp;hellip;&amp;rdquo; query turns up 100+ answers because many people have encountered the problem before. This was not the case for Julia. Lack of examples was an especially difficult issue for plots.&lt;/p&gt;

&lt;p&gt;Debugging in Jupyter was difficult, since it mostly amounted to debugging by bisection, isolation, and occasionally printing. Students found some of the error messages cryptic (especially when it was about not having a matching method, since we did not really go into the type system).&lt;/p&gt;

&lt;p&gt;The most puzzling transient bugs were because of &lt;a href=&#34;https://github.com/julialang/julia/issues/265&#34;&gt;#265&lt;/a&gt; (&amp;ldquo;but I recompiled that function!&amp;rdquo;). This was solved by restarting the kernel, so the latter became somewhat of a panacea. Since compilation time dominated everything, this slowed things down considerably.&lt;/p&gt;

&lt;h2 id=&#34;takeaway&#34;&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;Would definitely do it again. Even with the issues, Julia was the most comfortable language to teach in.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title type="html">Julia &#43; Weave.jl &#43; hugo test</title>
    <link href="https://tpapp.github.io/post/hugo-julia-weave/"/>
    <id>https://tpapp.github.io/post/hugo-julia-weave/</id>
    <published>2017-03-03T13:11:53+01:00</published>
    <updated>2017-03-03T13:11:53+01:00</updated>
    
    <content type="html" xml:base="https://tpapp.github.io/post/hugo-julia-weave/">&lt;p&gt;Testing the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; formatter for &lt;a href=&#34;https://github.com/mpastell/Weave.jl&#34;&gt;Weave.jl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Testing inline code: &lt;code&gt;1+1=2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Testing math:
$$x^2+y^2 = \int_0^1 f(z) dz$$&lt;/p&gt;

&lt;p&gt;Testing code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing proper highlighting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;function&lt;/span&gt; foo(x, y)
    x&lt;span class=&#34;sfa0&#34;&gt;+&lt;/span&gt;y
&lt;span class=&#34;s3e8&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;x &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc84&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;10&lt;/span&gt;
y &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;sfa0&#34;&gt;.^&lt;/span&gt;&lt;span class=&#34;sc84&#34;&gt;2&lt;/span&gt;
scatter(x, y, legend &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s3e8&#34;&gt;false&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;../figures/hugo-julia-weave_4_1.svg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Caption for this plot&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</content>
  </entry>
  
</feed>
