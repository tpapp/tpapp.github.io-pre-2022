<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia on Tamás K. Papp&#39;s website</title>
    <link>http://tpapp.github.io/tags/julia/</link>
    <description>Recent content in Julia on Tamás K. Papp&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017, Tamás K. Papp. [CC-BY-SA](https://creativecommons.org/licenses/by-sa/4.0/legalcode).</copyright>
    <lastBuildDate>Wed, 13 Sep 2017 11:18:59 +0200</lastBuildDate>
    
	<atom:link href="http://tpapp.github.io/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>log1p in Julia</title>
      <link>http://tpapp.github.io/post/log1p/</link>
      <pubDate>Wed, 13 Sep 2017 11:18:59 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/log1p/</guid>
      <description>edit: fixed bogus interaction of MathJax and code highlighting.
edit2: added benchmarks.
This is a follow-up on a question I asked on the Julia forums about calculating [ \text{log1p}(x) = \log(1+x) ] This calculation is tricky because if $x \approx 0$, [ \log(1+x) \approx x ] while as $x \to \infty$, $\log(1+x)$ approaches $\log(x)$, so simply using log(1+x) will not be as accurate as it could be. Numerical analysts have developed specialized methods for these calculations that try to get an accurate answer, and all programming languages serious about numerical calculations have an implementation either in the core language or a library.</description>
    </item>
    
    <item>
      <title>Emacs customizations for julia-mode</title>
      <link>http://tpapp.github.io/post/emacs-julia-customizations/</link>
      <pubDate>Mon, 28 Aug 2017 14:41:58 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/emacs-julia-customizations/</guid>
      <description>I find the following customizations very useful for editing Julia code in Emacs. Add them to julia-mode-hook, eg
(defun customize-julia-mode () &amp;quot;Customize julia-mode.&amp;quot; (interactive) ;; my customizations go here ) (add-hook &amp;#39;julia-mode-hook &amp;#39;customize-julia-mode)  Highlight FIXME/TODO/&amp;hellip; When I just want to note something in a comment for future reference, I prefer to have certain words highlighted. You can use something like this:
(font-lock-add-keywords nil &amp;#39;((&amp;quot;\\&amp;lt;\\(FIXME\\|TODO\\|QUESTION\\|NOTE\\)&amp;quot; 1 font-lock-warning-face t)))  This is what it looks like:</description>
    </item>
    
    <item>
      <title>Local packages in a separate directory in Julia</title>
      <link>http://tpapp.github.io/post/julia-local-test/</link>
      <pubDate>Wed, 23 Aug 2017 10:10:48 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/julia-local-test/</guid>
      <description>I run Pkg.update() fairly often to stay up to date and benefit from the latest improvements of various packages. I rarely ever pin to a specific package version, but I occasionally checkout master for some packages, especially if I am contributing.
Despite updating regularly, I found that the documentation subtly diverged from what I was experiencing for some packages. After looking into the issue, I learned that I was 2&amp;ndash;3 minor versions behind despite updating regularly.</description>
    </item>
    
    <item>
      <title>Sampling variation in effective sample size estimates (MCMC)</title>
      <link>http://tpapp.github.io/post/ess-sampling/ess-sampling/</link>
      <pubDate>Mon, 12 Jun 2017 16:25:57 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/ess-sampling/ess-sampling/</guid>
      <description>Introduction MCMC samples, used in Bayesian statistics, are not independent &amp;mdash; in fact, unless one uses specialized methods or modern HMC, posterior draws are usually at highly autocorrelated. For independent draws, [ \text{variance of simulation mean} \propto \frac1N ] where $N$ is the sample size, but for correlated draws, one has to scale the sample size with a factor [ \tau = \frac{1}{1+2\sum_{k=1}^\infty \rho_k} ] where $\rho_k$ is the lag-$k$ autocorrelation.</description>
    </item>
    
    <item>
      <title>Continuous-time deterministic dynamic programming in Julia</title>
      <link>http://tpapp.github.io/post/dynamic-programming/</link>
      <pubDate>Sun, 02 Apr 2017 19:06:04 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/dynamic-programming/</guid>
      <description>For the past few weeks I have been organizing pieces of code I have used to solve economic models into Julia packages. EconFunctions.jl is a collection of trivial functions that I noticed that I kept recoding/copy-pasting everywhere, occasionally making errors. ContinuousTransformations.jl is a library for manipulating various commonly used homeomorphisms (univariate at the moment), which are useful in functional equations or Markov Chain Monte Carlo. Finally ParametricFunctions.jl is for working with parametric function families.</description>
    </item>
    
    <item>
      <title>Blogging with Hugo, Julia, Weave.jl</title>
      <link>http://tpapp.github.io/post/blogging-weave-julia-hugo/</link>
      <pubDate>Thu, 30 Mar 2017 10:02:32 +0200</pubDate>
      
      <guid>http://tpapp.github.io/post/blogging-weave-julia-hugo/</guid>
      <description>I have made a PR to Weave.jl which Matti Pastell kindly merged recently. This allows a relatively smooth workflow for blogging using the static website generator Hugo, and generating some pages with plots and evaluated Julia results. I made the source for my blog available so that others can use it for their own blogging about Julia. An example is this post.
The gist of the workflow is as follows:</description>
    </item>
    
    <item>
      <title>Teaching a course using Julia</title>
      <link>http://tpapp.github.io/post/teaching-a-course/</link>
      <pubDate>Fri, 24 Mar 2017 14:34:22 +0100</pubDate>
      
      <guid>http://tpapp.github.io/post/teaching-a-course/</guid>
      <description>I just finished teaching a graduate course on practical aspects of dynamic optimization to our economics students. This year, for the first time, I taught the course using Julia, and this is a writeup of the experience. This was an intensive, 10-week course, with two classes per week, taught in the computer lab. A course on the theory of dynamic optimization was a prerequisite, this one was all about the actual numerical methods.</description>
    </item>
    
    <item>
      <title>Julia &#43; Weave.jl &#43; hugo test</title>
      <link>http://tpapp.github.io/post/hugo-julia-weave/</link>
      <pubDate>Fri, 03 Mar 2017 13:11:53 +0100</pubDate>
      
      <guid>http://tpapp.github.io/post/hugo-julia-weave/</guid>
      <description>Testing the Hugo formatter for Weave.jl.
Testing inline code: 1+1=2.
Testing math: $$x^2+y^2 = \int_0^1 f(z) dz$$
Testing code:
1+1  2  Testing proper highlighting:
functionfoo(x, y) x+y end  A plot:
x = 1:10 y = x.^2 scatter(x, y, legend = false)   Caption for this plot   </description>
    </item>
    
  </channel>
</rss>